volatile int comparator_counter = 0; // counter, needs to be declared volatile
// so compiler won't optimize the incrementing line out of the compiled program
// volatile is qualifier for interrupts specifically
// counter is interrupt-safe

int comparator_counter_previous = 0;
unsigned long current_time = 0; // time--> calls millis() which gives milliseconds since last reset
// check out elapsedmillis library for timing purposes

unsigned long comparator_time = 0; // current time
unsigned long comparator_time_previous = 0; // last time we reported the speed (# interrupts/time passed)
unsigned long comparator_time_delta = 0; // encoder_time - encoder_time_previous

// scaling factor from counts to rpm of motor (with gears taken into account)
int counts_per_rev = 12*120; // expected number of interrupts per revolution based on pololu motor gear/encoder
int comparator_sample_interval = 100; //how long (in ms) we wait before checking speed 

//define variables
//analog input + pwm variables
int duration = 0;
int write_duty = 0; // duty cycle to send to mosfet to run motor (PWM)
float frequency = 0;
float angular_velocity = 0;
float PPR = 2;


int motor_gate_pin = 5; // sends certain PWM to mosfet to control motor
int comparator_pin = 2; // recieves voltage signal information from comparator
int LED_power_pin = 14; // otherwise known as pin A0, simply powers LED
int comparator_ref_pin = 18; // otherwise known as pin A4, simply provides volatage to resistor divide to give specific Vref for comparator
int phototransistor_pin = 19; // otherwise known as pin A5, simply sends some current to establish voltage drop over phototransistor


//interrupt service routine
// quick, called after each interrupt signal
void comparatorInterruptHandler() {
  ++comparator_counter;
}

void loop() {
  // power LED:
  analogWrite(LED_power_pin, 255);
  // create Vref voltage:
  anaglogWrite(comparator_ref_pin, 255);
  // create phototransistor voltage:
  analogWrite(phototransistor_pin, 255);
  // get input from Serial monitor to set duty cycle
  //while (Serial.available() == 0) {
  //}
  if(Serial.available()>0){
    //write_duty = Serial.read();
    write_duty = Serial.parseInt();
    Serial.println("Enter time duration in seconds: ")
    duration = Serial.parseInt()
    Serial.println((String)"Time duration "+duration+" seconds long");
    analogWrite(motor_gate_pin, write_duty);
    Serial.println((String)"Duty cycle set to: "+write_duty);
    Serial.println("Hit enter key for emergency stop");
    //Serial.println("Enter another integer (PWM between 0 and 255) to change speed: ");     
  }

// get time
unsigned long new_current_time = millis();
  // tachnometer frequency formula: f = # pulses / time passed
  // the number of pulses is tracked by the comparator_counter variable
  // the time passed will be about the same everytime, determined by the comparator_sample_interval global variable
  comparator_time_delta = new_current_time - comparator_time_previous; // this value will be the "time passed"
  if (comparator_time_delta > comparator_sample_interval) {
    unsigned long comparator_counter_current = comparator_counter;
    unsigned long comparator_counter_delta = copmarator_counter_current - comparator_counter_previous; // this value will be the "# pulses"
    frequency = comparator_counter_delta / comparator_time_delta; // this value is "f"
    
  // tachometer frequency (f) to RPM formula: RPM = (f * 60) / PPR
  // where PPR = pulses per revolution
  // in the case of our centrifuge, the PPR = 2, because there are 2 light blockers, meaning that there will be two "pulses" per revolution
  angular_velocity = (frequency*60) / PPR;
  angular_velocity = 60.0 * 1000 * comparator_counter_delta / counts_per_rev / comparator_time_delta; // rpm
  comparator_counter_previous = comparator_counter_current;
  comparater_time_previous = new_current_time;
  Serial.println((String)"Ang. Vel.: "+angular_velocity);
  Serial.println((String)"PWM Value: "+write_duty);
  }
  current_time = new_current_time;

  if (current_time >= duration) {
    // make motor stop when time duration reached
    analogWrite(motor_gate_pin, 0);
    Serial.pringln((String)duration+" seconds passed, centrifugation complete.");
    Serial.println("Please enter desired motor speed (integer sets PWM between 0 and 255): ");
  }
}
